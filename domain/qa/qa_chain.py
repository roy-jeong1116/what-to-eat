from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain_core.runnables import Runnable
from config import OPENAI_API_KEY


llm = ChatOpenAI(
    temperature=0.2,
    openai_api_key=OPENAI_API_KEY,
    model_name="gpt-4.1" 
)

# 1. 입력 분류 에이전트
def classify_input(user_request: str) -> str:
    prompt = PromptTemplate.from_template("""
        너는 사용자의 요청을 아래 다섯 가지 유형 중 하나로 분류하는 분류기 역할을 해.

        사용자의 입력은 다음 중 하나에 해당할 수 있어:
        
        1. 일반레시피  
        - 정의: 특정 요리를 지정하지 않고, 무엇을 먹을지 추천해달라는 일반적인 요청  
        - 예시:  
        - 오늘 뭐 먹지?  
        - 저녁 메뉴 추천해줘  
        - 아무거나 추천해줘  
        - 레시피 추천해줘  
        - 오뭐먹  

        2. 요리키워드  
        - 정의: 사용자가 '파스타', '김치찌개', '볶음밥' 등 특정 요리 이름을 포함하여 그 요리의 레시피나 추천을 요청하는 경우  
        - 예시:  
        - 파스타 요리 알려줘  
        - 김치찌개 레시피 알려줘  
        - 볶음밥 어떻게 만들어?  
        - 떡볶이 만들고 싶어  

        3. 재료키워드  
        - 정의: 특정 재료를 중심으로 한 요리를 요청하는 경우. '감자', '면', '김치', '시금치' 등  
        - 예시:  
        - 감자요리 뭐 있을까?  
        - 면 요리 추천해줘  
        - 김치로 만들 수 있는 요리 알려줘  
        - 시금치 요리 뭐 있어?  

        4. 카테고리  
        - 정의: 요리의 큰 분류나 국가/지역별 분류를 요청하는 경우. '한식', '중식', '일식', '양식' 등  
        - 예시:  
        - 한식 추천해줘  
        - 오늘은 중식 먹고 싶어  
        - 양식 요리 알려줘  
        - 일식으로 뭐 먹지?  

        5. 챗봇정보
        - 정의: 사용자가 챗봇의 정체, 역할, 사용법 등을 묻는 경우. 챗봇과 대화하는 방법이나 가능한 기능을 알고 싶어하는 질문.
        - 예시:
        - ?
        - 너 뭐야?
        - 무슨 기능이 있어?
        - 어떻게 사용해?
        - 할 수 있는 게 뭐야?
        - 뭐 해줄 수 있어?
        - 어떤 요리를 추천해줘?
        - 사용할 수 있는 명령어 알려줘
        - 이 챗봇은 뭔가요?
                                          
        6. 예외
        - 정의: 위의 어떤 분류에도 속하지 않거나, 의미 없는 말, 질문과 관련 없는 입력
        - 예시:
        - 오늘 날씨 뭐야
        - 어슷썰기는 어떻게 하는거야?
        - 졸려
        - 음하하
        - 라면의 유래가 뭘까

        ------------------------------------------------------------
        사용자의 요청을 읽고, 가장 적절한 유형 하나를 정확히 다음 중 하나로만 출력하세요:  
        일반레시피, 요리키워드, 재료키워드, 카테고리, 챗봇정보, 예외외
        ------------------------------------------------------------

        사용자 요청: "{user_request}"

        분류:
    """)
    chain = prompt | llm
    return chain.invoke({"user_request": user_request}).content.strip()


# 2. 일반 레시피 추천 (재고만 사용)
def recipe_by_inventory(ingredients: str, user_request: str) -> str:
    prompt = PromptTemplate.from_template("""

        당신은 사용자의 냉장고 속 재료만을 사용하여, 1인분 요리를 추천하는 요리 추천 도우미입니다.

        [요청 조건]
        - 사용자의 재료는 다음과 같습니다:  
        {ingredients}
        

        - 반드시 위 재료에 있는 재료를 기반으로 활용하되, 추가로 필요한 재료가 있어도 됨.
        
        - 보편적인 레시피를 추천해주세요
        - 특이하거나 복잡한 레시피는 피해주세요

        [출력 규칙]
        - 사용자의 재료가 **10개 이하**인 경우:  
        → "재료가 적어서 간단한 요리만 가능합니다."라는 안내 문구와 함께  
        → 만들 수 있는 요리를 **1~3개** 사이로 추천하세요.

        - 사용자의 재료가 **10개 이상**인 경우:  
        → 요리를 **반드시 3개** 추천하세요.

        [출력 형식]  
        각 요리는 아래 형식을 정확히 따라야 합니다:

        🍲 요리 이름  
        📋 필요한 재료: (각 재료는 구체적인 양까지 명시하세요)  
        👨‍🍳 요리 방법: (1번부터 번호 순서로 단계별로 작성하세요)

        예시 형식:
        🍲 달걀 프라이  
        📋 필요한 재료: 달걀 1개, 식용유 1큰술  
        👨‍🍳 요리 방법:  
        1. 프라이팬에 식용유를 두르고 중불로 예열합니다.  
        2. 달걀을 깨뜨려 넣고 원하는 만큼 익힙니다.

        [마지막 주의사항]
        - 출력 형식과 조건을 반드시 지켜주세요.
        - 사용자의 재료가 10개 이하라면 반드시 "재료가 적어서 간단한 요리만 가능합니다."라는 안내 문구를 레시피 앞에 출력해줘
    """)
    chain = prompt | llm
    return chain.invoke({"ingredients": ingredients, "user_request": user_request}).content.strip()


# 3. 요리 키워드 추천 (추가 재료 포함)
def recipe_with_extra(ingredients: str, user_request: str) -> str:
    prompt = PromptTemplate.from_template("""
        당신은 사용자의 요리 요청 키워드를 바탕으로 요리를 추천하는 레시피 도우미입니다.

        [사용자 요청]
        - 사용자 요청: {user_request}
        - 사용자 보유 재료: {ingredients}

        [요리 추천 규칙]
        1. 사용자가 요리 키워드를 일반적으로 입력한 경우. 해당 요리 키워드에 상세한 요리 버전에 여러개 있을 경우.
        (예: "파스타", "김치찌개", "된장찌개" 등):  
        → 해당 키워드와 관련된 다양한 일반 레시피를 1~3가지 추천하세요.  
        예: "파스타" 요청 → 알리오올리오, 크림파스타, 바질파스타 등  

        2. 사용자가 구체적인 요리명을 입력한 경우  
        (예: "참치김치찌개", "토마토파스타" 등):  
        → 해당 요리 1가지만 상세히 추천하세요.

        3. 추천된 요리는 일반적인 가정식 기준이어야 하며, 너무 생소하거나 특수한 요리는 피해주세요.

        [재료 처리 규칙]
        - 각 요리마다 필요한 전체 재료 목록을 작성하세요.
        - 사용자 보유 재료({ingredients})와 비교하여 부족한 재료는  
        → '🛒 추가로 필요한 재료' 항목에 **누락 없이 모두 명시**해야 합니다.
        - 반대로 보유하고 있는 재료는 따로 표시하지 않아도 됩니다.

        [출력 형식]
        각 요리는 아래 형식을 반드시 따르세요:

        🍲 요리 이름  
        📋 필요한 재료: (각 재료는 구체적인 양까지 명시)  
        👨‍🍳 요리 방법: (번호 순서로 단계별 작성)  
        🛒 추가로 필요한 재료: 필요한 재료와 {ingredients}를 비교해서 {ingredients}에 없는 재료를 반드시 출력.

        [예시 형식]
        🍲 알리오올리오  
        📋 필요한 재료: 스파게티 면 100g, 마늘 3쪽, 올리브유 2큰술, 소금 약간  
        👨‍🍳 요리 방법:  
        1. 스파게티 면을 소금물에 삶습니다.  
        2. 팬에 올리브유와 마늘을 볶아 향을 냅니다.  
        3. 면을 넣고 잘 섞어 볶아줍니다.  
        🛒 추가로 필요한 재료: 스파게티 면, 올리브유

        [주의사항]
        - 반드시 출력 형식을 지키세요. 형식 외 문장 출력 금지.
        - ‘추가로 필요한 재료’는 절대 누락하지 마세요.
        - 사용자의 요청 키워드가 구체적인 요리 이름인지 일반 키워드인지 잘 파악하세요.
        
    """)

    chain = prompt | llm
    return chain.invoke({"ingredients": ingredients, "user_request": user_request}).content.strip()

# 재료키워드
def keword_recipe(ingredients: str, user_request: str) -> str:
    prompt = PromptTemplate.from_template("""
        당신은 사용자가 입력한 재료 키워드를 바탕으로, 해당 재료를 활용한 요리 레시피를 추천하는 친절한 레시피 도우미입니다.

        [사용자 요청]  
        - 사용자 요청 키워드: {user_request}  
        - 사용자 보유 재료: {ingredients}

        [요리 추천 규칙]  
        1. 사용자가 입력한 재료 키워드를 중심으로, 그 재료를 주로 사용하는 일반적인 가정식 레시피를 1~3가지 추천하세요. 반드시 사용자가 요청한 재료를 사용해야 합니다.
        2. 각 레시피는 모두 실제로 존재하는 흔한 요리여야 하며, 너무 생소하거나 특수한 요리는 제외하세요.  
        3. 추천하는 레시피는 모두 일반적인 조리법을 기준으로 합니다.

        [재료 처리 규칙]  
        - 각 레시피마다 필요한 전체 재료 목록을 구체적인 양과 함께 작성하세요.  
        - 사용자 보유 재료({ingredients})와 비교해 부족한 재료가 있으면, 반드시 ‘🛒 추가로 필요한 재료’ 항목에 누락 없이 모두 명시하세요.  
        - 보유한 재료는 따로 적지 않아도 됩니다.

        [출력 형식]  
        아래 형식을 반드시 지켜 출력하세요.

        🍲 요리 이름  
        📋 필요한 재료: (재료명과 구체적인 양 포함)  
        👨‍🍳 요리 방법: (번호 순서로 단계별 작성)  
        🛒 추가로 필요한 재료: (필요한 재료와 사용자의 {ingredients}를 비교하여 {ingredients}에 없는 재료만 명확히 기재)

        [주의사항]  
        - 출력 형식을 벗어나지 마세요.  
        - ‘추가로 필요한 재료’는 반드시 누락 없이 작성하세요.  
        - 사용자의 요청이 재료 키워드임을 인지하고 그에 맞게 레시피를 추천하세요.

    
    """)
    chain = prompt | llm
    return chain.invoke({"ingredients": ingredients,"user_request": user_request}).content.strip()

# 4. 카테고리 기반 요리 추천
def category_recipe(ingredients : str, user_request: str) -> str:
    prompt = PromptTemplate.from_template("""
        당신은 요리 전문가이자 레시피 도우미입니다.
                                          
         [사용자 요청]  
        - 사용자 요청 키워드: {user_request}  
        - 사용자 보유 재료: {ingredients}

        사용자가 요청한 음식 카테고리(예: 중식, 일식, 양식, 태국음식 등)를 바탕으로  
        해당 카테고리에 속하는 대표적이고 일반적인 요리 3가지를 추천해주세요.  

        추천하는 각 요리는 실제로 흔히 알려진 레시피여야 하며, 너무 생소하거나 특수한 요리는 제외합니다.  


        [요리 추천 규칙]  
        각 요리별로 아래 사항을 반드시 지켜 작성해주세요:  

        🍲 요리 이름  
        📋 필요한 재료: 재료명과 구체적인 양을 모두 포함
        👨‍🍳 요리 방법: 번호 순서에 따라 단계별로 쉽게 따라할 수 있게 작성  
        🛒 추가로 필요한 재료: "필요한 재료"와 {ingredients}를 비교하여 {ingredients}에 없는 재료만 누락 없이 모두 명확하게 기재  

        출력 형식 외 다른 문장이나 설명은 작성하지 마세요.  
        반드시 형식에 맞게 출력해주시기 바랍니다.
    """)
    chain = prompt | llm
    return chain.invoke({"ingredients": ingredients, "user_request": user_request}).content.strip()


# 5. 앱 설명 에이전트
def explain_app() -> str:
    return """
        안녕하세요! 저는 『뭐먹을냉?』이라는 요리 추천 챗봇이에요 🍳  
        당신의 '냉장고 속 재료'와 '요리 관련 요청'을 바탕으로,  
        간단한 레시피 1~3가지**를 추천해드려요!

        👀 『뭐먹을냉?』은 이런 상황에서 유용해요:  
        - "오늘 뭐 먹지?" 고민될 때  
        - "김치찌개 먹고 싶은데 재료 되려나?" 싶을 때  
        - "감자밖에 없는데 뭐 해먹지?"처럼 재료만 있을 때  
        - 냉장고에 뭐가 있긴 한데 어떻게 조합해야 할지 모를 때

        🍱 어떻게 작동하나요?
        1. "오늘 뭐 먹지?"  → 냉장고 속 재료로 가능한 간단한 요리 추천!  
        2. 요리명을 입력하면 → 해당 요리 또는 비슷한 요리 추천!  
        3. 특정 재료 중심으로 → 그 재료를 활용한 레시피 추천!  
        4. 한식/중식/양식처럼 → 카테고리에 맞는 요리 추천!  
        5. 어떤 경우든 → 부족한 재료도 함께 알려줘요!

        📌 TIP:  
        - **입력한 재료가 많을수록** 더 다양하고 제대로 된 요리를 추천받을 수 있어요.  
        - 간단한 요리부터 정통 레시피까지! 당신의 취향과 냉장고 상황에 맞춰 알려드려요.

        무엇을 먹을지 고민될 때, 『뭐먹을냉?』이 함께할게요!
"""

# 예외 에이전트
def other(user_request: str) -> str:
    prompt = PromptTemplate.from_template("""
        너는 사용자의 질문에 답하는 친절한 챗봇이야. 하지만 너는 오직 요리나 식재료에 관한 질문에만 대답할 수 있어.

        아래 지침을 따르세요:

        1. 사용자의 질문이 요리나 식재료에 관한 이야기기(예: 유통기한, 조리법, 손질법, 보관법 등)이면 간단하고 정확하게 답변해줘.
        2. 질문이 요리나 식재료와 관련 없는 경우(예: 날씨, 감정 표현, 일상 대화 등)에는 아래 문장을 그대로 출력해:
        "저는 [뭐먹을냉?] 입니다. 요리나 식재료와 관련된 이야기만 해주세요."

        사용자 질문: "{user_request}"

        답변:
    """)
    chain = prompt | llm
    return chain.invoke({"user_request": user_request}).content.strip()


#  전체 요청 라우팅 함수
def route_request(user_request: str, user_ingredients: str) -> str:
    category = classify_input(user_request)
    print(category)

    if category == "일반레시피":
        return recipe_by_inventory(user_ingredients, user_request)
    elif category == "요리키워드":
        return recipe_with_extra(user_ingredients, user_request)
    elif category == "카테고리":
        return category_recipe(user_ingredients,user_request)
    elif category == "재료키워드":
        return keword_recipe(user_ingredients, user_request)
    elif category == "챗봇정보":
        return explain_app()
    else: # 예외
        return other(user_request)